export function drawRandomNumbers(n: number, count: number): number[]
{
    // const randomNumbers: number[] = [];
    // for (let i = 0; i < count; i++) {
    //     const randomNumber = Math.floor(Math.random() * n) + 1;
    //     randomNumbers.push(randomNumber);
    // }

    // return randomNumbers;

    return [36, 82, 209, 249, 269, 411, 427, 440, 695, 1016, 1115, 1138, 1314, 1382, 1793, 1794, 1837, 1859, 2052, 2056, 2057, 2104, 2107, 2191, 2222, 2285, 2406, 2588, 2688, 2689, 2803, 2833, 2835, 2975, 2976, 3076, 3421, 3447, 3583, 3654, 3689, 3715, 3738, 3739, 3831, 3870, 3986, 4209, 4440, 4487, 4541, 4736, 4802, 4852, 4892, 4899, 4981, 5030, 5037, 5160, 5330, 5348, 5401, 5540, 5621, 5686, 5694, 5729, 5843, 5844, 6008, 6009, 6174, 6180, 6388, 6396, 6527, 6685, 6706, 6797, 6840, 6917, 6943, 7223, 7267, 7324, 7380, 7410, 7412, 7427, 7550, 7568, 7575, 7605, 7695, 7699, 7837, 7974, 7980, 8043, 8297, 8321, 8413, 8423, 8507, 8637, 8839, 8862, 8870, 8920, 8964, 8973, 8977, 9052, 9099, 9239, 9300, 9307, 9577, 9807, 9907, 9924, 9926, 10083, 10260, 10364, 10367, 10535, 10794, 10816, 10886, 10892, 11053, 11151, 11236, 11245, 11343, 11381, 11417, 11433, 11454, 11487, 11496, 11505, 11795, 11851, 11998, 12051, 12053, 12093, 12148, 12502, 12607, 12694, 12770, 12775, 12806, 12837, 12888, 12913, 12984, 13023, 13220, 13480, 13482, 13497, 13505, 13593, 13628, 13806, 13904, 13963, 14126, 14266, 14378, 14426, 14487, 14763, 14777, 14871, 14875, 15018, 15050, 15059, 15082, 15151, 15161, 15314, 15628, 15680, 15748, 16046, 16055, 16076, 16213, 16395, 16526, 16686, 16729, 16787, 16797, 16981, 17049, 17093, 17105, 17154, 17273, 17489, 17565, 17602, 17786, 17852, 17867, 17873, 17950, 17957, 17982, 18252, 18303, 18640, 18754, 18873, 18973, 18997, 19112, 19315, 19451, 19714, 19775, 19783, 19870, 19962, 20253, 20319, 20449, 20696, 20875, 20890, 20920, 20922, 21142, 21196, 21318, 21324, 21486, 21539, 21597, 21759, 21769, 21811, 21890, 21909, 21947, 22007, 22030, 22059, 22196, 22268, 22324, 22557, 22570, 22611, 22857, 22879, 22951, 22983, 23026, 23052, 23092, 23419, 23474, 23532, 23703, 23845, 23865, 23898, 24089, 24220, 24316, 24370, 24512, 24879, 25033, 25356, 25507, 25527, 25580, 25685, 25759, 25888, 25972, 26012, 26231, 26382, 26422, 26551, 26867, 26898, 27168, 27171, 27203, 27206, 27226, 27329, 27395, 27479, 27491, 27584, 27604, 27783, 27798, 27807, 28004, 28024, 28110, 28306, 28470, 28604, 28626, 28675, 28889, 28890, 28921, 28962, 29029, 29184, 29270, 29535, 29640, 29801, 29893, 30169, 30183, 30281, 30414, 30466, 30508, 30528, 30623, 30751, 31112, 31186, 31235, 31296, 31401, 31414, 31461, 31902, 32000, 32025, 32071, 32127, 32213, 32225, 32268, 32312, 32427, 32494, 32502, 32536, 32575, 32611, 32741, 32760, 32762, 32936, 32960, 33055, 33281, 33350, 33420, 33466, 33698, 33964, 34027, 34139, 34142, 34293, 34474, 34752]
}

export function calculateFinitePopulationSampleSize(zScore: number, marginOfError: number, populationProportion: number, populationSize: number): number 
{
    const E = marginOfError / 100;
    const initialSampleSize = (zScore ** 2 * populationProportion * (1 - populationProportion)) / (E ** 2);
    const finitePopulationCorrection = 1 + ((initialSampleSize - 1) / populationSize);
    const adjustedSampleSize = initialSampleSize / finitePopulationCorrection;

    return Math.ceil(adjustedSampleSize);
}